//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.17
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FullStackCodeGenerator {
    using SimpleCodeGenerator;
    using System;
    
    
    public partial class CrudHooks_ts_tt_005cc16d_b559_41c8_bd4e_818c104fd0f9 : BaseTemplate<ProjectTemplate> {
        
        
        #line 36 "P:\CodeGeneratorDemos\SimpleCodeGenerator\FullStackCodeGenerator\MDE\Templates\Clientside\src\Hooks\CrudHooks.ts.tt"

    public override string RelativeFilePath => $"Clientside/src/Hooks/CrudHooks.ts";

        #line default
        #line hidden
        
        
        public override string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "P:\CodeGeneratorDemos\SimpleCodeGenerator\FullStackCodeGenerator\MDE\Templates\Clientside\src\Hooks\CrudHooks.ts.tt"
            this.Write(@"import { BaseEntity } from ""../Models/BaseEntity"";
import axios from 'axios';
import { useEffect, useState } from ""react"";

const baseUrl = 'http://localhost:8080';

export function useCreate<T extends BaseEntity>(modelName: string) {
  return (model: T) => axios.post<T>(`${baseUrl}/${modelName}/create`, model)
    .then(resposnse => resposnse.data)
}

export function useRead<T extends BaseEntity>(modelName: string) {
  const [data, setData] = useState<Array<T>>([])
  useEffect(() => {
    refetchFn()
  })
  const refetchFn = () => {
    axios.get<Array<T>>(`${baseUrl}/${modelName}/read`)
      .then(resposnse => {setData(!resposnse.data ? [] : resposnse.data)})
  }
  return {data, refetchFn}
}

export function useUpdate<T extends BaseEntity>(modelName: string) {
  return (model: T) => axios.post<T>(`${baseUrl}/${modelName}/update`, model)
    .then(resposnse => resposnse.data)
}

export function useDelete<T extends BaseEntity>(modelName: string) {
  return (model: T) => axios.post<T>(`${baseUrl}/${modelName}/delete`, model)
    .then(resposnse => resposnse.data)
}

");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public override void Initialize() {
            base.Initialize();
        }
    }
}
